from django.core.management.base import BaseCommand
from users.models import Movie, Genre, Actor, CrewMember # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º –≤–µ—Ä–Ω—ã–µ
from mgb_main.utils import get_tmdb_data # –¢–≤–æ—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è TMDB
import time
from datetime import datetime

class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ N –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–µ) –∏–∑ TMDb"

    def add_arguments(self, parser):
        parser.add_argument(
            '--pages',
            type=int,
            default=50, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å—Ç—Ä–∞–Ω–∏—Ü (50 * 20 = 1000 —Å–µ—Ä–∏–∞–ª–æ–≤)
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å TMDb (20 —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)',
        )
        parser.add_argument(
            '--start-page',
            type=int,
            default=1,
            help='–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É',
        )

    def handle(self, *args, **kwargs):
        total_pages_to_fetch = kwargs['pages']
        start_page = kwargs['start_page']
        tv_shows_loaded_count = 0
        MAX_TV_SHOWS_PER_RUN = total_pages_to_fetch * 20 # –ü—Ä–∏–º–µ—Ä–Ω–æ

        BASE_IMAGE_URL = "https://image.tmdb.org/t/p/original"

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è TV
        # TMDB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ ID –∂–∞–Ω—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
        genres_data = get_tmdb_data("genre/tv/list", {"language": "ru-RU"})
        if genres_data and "genres" in genres_data:
            for g_data in genres_data["genres"]:
                genre, created = Genre.objects.update_or_create(
                    tmdb_id=g_data["id"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º TMDB ID –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    defaults={"name": g_data["name"]}
                )
                if created:
                    self.stdout.write(self.style.SUCCESS(f"–î–æ–±–∞–≤–ª–µ–Ω –∂–∞–Ω—Ä TV: {genre.name}"))
            self.stdout.write(self.style.SUCCESS("–ñ–∞–Ω—Ä—ã TV –æ–±–Ω–æ–≤–ª–µ–Ω—ã/–∑–∞–≥—Ä—É–∂–µ–Ω—ã."))
        else:
            self.stdout.write(self.style.WARNING("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂–∞–Ω—Ä—ã TV."))


        self.stdout.write(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–∏–∞–ª–æ–≤ —Å TMDb, —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page} –ø–æ {start_page + total_pages_to_fetch -1}...")

        for page_num in range(start_page, start_page + total_pages_to_fetch):
            self.stdout.write(f"--- –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} ---")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö TV —à–æ—É
            data = get_tmdb_data("tv/popular", {"language": "ru-RU", "page": page_num})

            if not data or "results" not in data:
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."))
                continue # –∏–ª–∏ break, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

            for tv_item in data["results"]:
                tmdb_id = tv_item.get("id")
                if not tmdb_id:
                    self.stdout.write(self.style.WARNING("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ—Ä–∏–∞–ª –±–µ–∑ TMDB ID"))
                    continue

                first_air_date_str = tv_item.get("first_air_date")
                first_air_date_obj = None
                if first_air_date_str:
                    try:
                        first_air_date_obj = datetime.strptime(first_air_date_str, "%Y-%m-%d").date()
                    except ValueError:
                        self.stdout.write(self.style.WARNING(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{first_air_date_str}' –¥–ª—è {tv_item.get('name')} (ID: {tmdb_id})"))
                        # –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –¥–∞—Ç—ã
                        # continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ tmdb_id –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã
                # if Movie.objects.filter(tmdb_id=tmdb_id, content_type=Movie.CONTENT_TYPE_TV).exists():
                #     self.stdout.write(self.style.NOTICE(f"–°–µ—Ä–∏–∞–ª {tv_item.get('name')} (ID: {tmdb_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."))
                #     continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∑–æ–Ω–æ–≤/—Å–µ—Ä–∏–π –∏ –¥—Ä.
                tv_details = get_tmdb_data(f"tv/{tmdb_id}", {"language": "ru-RU", "append_to_response": "credits,similar,videos"})
                if not tv_details:
                    self.stdout.write(self.style.WARNING(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è {tv_item.get('name')} (ID: {tmdb_id}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."))
                    continue

                poster_path = tv_details.get("poster_path")
                backdrop_path = tv_details.get("backdrop_path")

                defaults = {
                    "title": tv_details.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    "original_title": tv_details.get("original_name", ""),
                    "overview": tv_details.get("overview", ""),
                    "first_air_date": first_air_date_obj, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    # "release_date": first_air_date_obj, # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–æ–ª–µ release_date
                    "poster_path": f"{BASE_IMAGE_URL}{poster_path}" if poster_path else None,
                    "backdrop_path": f"{BASE_IMAGE_URL}{backdrop_path}" if backdrop_path else None,
                    "vote_average": tv_details.get("vote_average", 0),
                    "vote_count": tv_details.get("vote_count", 0),
                    "popularity": tv_details.get("popularity", 0),
                    "original_language": tv_details.get("original_language", ""),
                    "adult": tv_details.get("adult", False), # –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è TV –≤ TMDB API, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
                    "number_of_seasons": tv_details.get("number_of_seasons"),
                    "number_of_episodes": tv_details.get("number_of_episodes"),
                    "country": ", ".join([c["name"] for c in tv_details.get("production_countries", [])]),
                    "runtime": tv_details.get("episode_run_time")[0] if tv_details.get("episode_run_time") else 0,
                    "content_type": Movie.CONTENT_TYPE_TV, # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                }

                tv_show_obj, created = Movie.objects.update_or_create(
                    tmdb_id=tmdb_id,
                    defaults=defaults
                )

                tv_shows_loaded_count += 1
                action = "üì∫ –î–æ–±–∞–≤–ª–µ–Ω" if created else "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω"
                self.stdout.write(self.style.SUCCESS(f"{action} —Å–µ—Ä–∏–∞–ª: {tv_show_obj.title} (TMDB ID: {tv_show_obj.tmdb_id})"))

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞
                if "genres" in tv_details: # –ñ–∞–Ω—Ä—ã –±–µ—Ä–µ–º –∏–∑ –¥–µ—Ç–∞–ª–µ–π
                    tv_show_obj.genres.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                    for genre_data in tv_details["genres"]:
                        genre = Genre.objects.filter(tmdb_id=genre_data["id"]).first()
                        if genre:
                            tv_show_obj.genres.add(genre)
                        else:
                            self.stdout.write(self.style.WARNING(f"–ñ–∞–Ω—Ä —Å TMDB ID {genre_data['id']} ({genre_data['name']}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î."))


                # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–µ—Ä–æ–≤ (–∏–∑ credits)
                if tv_details.get("credits") and "cast" in tv_details["credits"]:
                    tv_show_obj.actors.clear()
                    for actor_data in tv_details["credits"]["cast"][:15]: # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ø-15 –∞–∫—Ç–µ—Ä–æ–≤
                        actor_profile_path = actor_data.get("profile_path")
                        actor_obj, _ = Actor.objects.update_or_create(
                            tmdb_id=actor_data["id"],
                            defaults={
                                "name": actor_data["name"],
                                "profile_path": f"{BASE_IMAGE_URL}{actor_profile_path}" if actor_profile_path else None,
                            },
                        )
                        tv_show_obj.actors.add(actor_obj)

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã (—Å–æ–∑–¥–∞—Ç–µ–ª–∏, —Ä–µ–∂–∏—Å—Å–µ—Ä—ã –∏ —Ç.–¥. - job: "Creator", "Executive Producer")
                # TMDB –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–µ 'created_by' –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –¥–µ—Ç–∞–ª–µ–π
                # –ê —Ç–∞–∫–∂–µ 'crew' –≤ 'credits'
                tv_show_obj.crew.clear()
                creators_added = set()

                if "created_by" in tv_details:
                    for creator_data in tv_details["created_by"]:
                        if creator_data["id"] not in creators_added:
                            member_obj, _ = CrewMember.objects.update_or_create(
                                tmdb_id=creator_data["id"],
                                defaults={
                                    "name": creator_data["name"],
                                    "job": "Creator", # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
                                },
                            )
                            tv_show_obj.crew.add(member_obj)
                            creators_added.add(creator_data["id"])
                
                if tv_details.get("credits") and "crew" in tv_details["credits"]:
                    for crew_data in tv_details["credits"]["crew"]:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤, –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª–∏
                        if crew_data["job"] in ["Director", "Screenplay", "Producer", "Executive Producer"] and crew_data["id"] not in creators_added:
                             member_obj, _ = CrewMember.objects.update_or_create(
                                tmdb_id=crew_data["id"],
                                defaults={
                                    "name": crew_data["name"],
                                    "job": crew_data["job"],
                                },
                            )
                             tv_show_obj.crew.add(member_obj)


                # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ (–∏–∑ similar)
                if tv_details.get("similar") and "results" in tv_details["similar"]:
                    tv_show_obj.similar_movies.clear() # –∏–ª–∏ similar_tv_shows, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª related_name
                    for similar_item in tv_details["similar"]["results"][:5]: # –¢–æ–ø-5 –ø–æ—Ö–æ–∂–∏—Ö
                        similar_tmdb_id = similar_item.get("id")
                        if not similar_tmdb_id: continue

                        s_first_air_date_str = similar_item.get("first_air_date")
                        s_first_air_date_obj = None
                        if s_first_air_date_str:
                            try:
                                s_first_air_date_obj = datetime.strptime(s_first_air_date_str, "%Y-%m-%d").date()
                            except ValueError:
                                pass # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —É –ø–æ—Ö–æ–∂–µ–≥–æ

                        s_poster_path = similar_item.get("poster_path")
                        s_backdrop_path = similar_item.get("backdrop_path")

                        # –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º "–∑–∞–≥–ª—É—à–∫–∏" –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç.
                        # –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –æ–Ω–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è, –∫–æ–≥–¥–∞ –¥–æ –Ω–∏—Ö –¥–æ–π–¥–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ.
                        similar_obj, _ = Movie.objects.update_or_create(
                            tmdb_id=similar_tmdb_id,
                            defaults={
                                "title": similar_item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                                "original_title": similar_item.get("original_name", ""),
                                "overview": similar_item.get("overview", ""), # –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
                                "first_air_date": s_first_air_date_obj,
                                "poster_path": f"{BASE_IMAGE_URL}{s_poster_path}" if s_poster_path else None,
                                "backdrop_path": f"{BASE_IMAGE_URL}{s_backdrop_path}" if s_backdrop_path else None,
                                "vote_average": similar_item.get("vote_average", 0),
                                "popularity": similar_item.get("popularity", 0),
                                "content_type": Movie.CONTENT_TYPE_TV,
                                "country": ",".join(tv_details.get("origin_country", [])),
                            }
                        )
                        tv_show_obj.similar_movies.add(similar_obj)

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–π–ª–µ—Ä–æ–≤ –∏–∑ videos
                if tv_details.get("videos") and "results" in tv_details["videos"]:
                    # –ò—â–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–ª–µ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
                    trailer_key = None
                    trailer_name = None
                    for video in tv_details["videos"]["results"]:
                        is_trailer = video.get("type") == "Trailer"
                        is_official = video.get("official") is True
                        site_is_youtube = video.get("site") == "YouTube"
                        lang_ru = video.get("iso_639_1") == "ru"
                        lang_en = video.get("iso_639_1") == "en"

                        if site_is_youtube and is_trailer:
                            if is_official and (lang_ru or lang_en): # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º
                                trailer_key = video.get("key")
                                trailer_name = video.get("name")
                                if lang_ru: break
                            elif trailer_key is None and (lang_ru or lang_en): # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                                trailer_key = video.get("key")
                                trailer_name = video.get("name")
                    
                    if trailer_key:
                        tv_show_obj.youtube_trailer = trailer_key
                        tv_show_obj.youtube_trailer_name = trailer_name
                        tv_show_obj.save(update_fields=['youtube_trailer', 'youtube_trailer_name'])


                if tv_shows_loaded_count >= MAX_TV_SHOWS_PER_RUN and total_pages_to_fetch * 20 == MAX_TV_SHOWS_PER_RUN : # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –±—ã–ª –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ --pages
                    self.stdout.write(self.style.SUCCESS(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_TV_SHOWS_PER_RUN} —Å–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ –∑–∞–ø—É—Å–∫."))
                    # break # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª
                    return # –õ—É—á—à–µ —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ handle

                time.sleep(0.3) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API TMDB (1-3 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–∏–∞–ª)

            self.stdout.write(self.style.NOTICE(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {len(data['results'])}. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {tv_shows_loaded_count}"))
            # time.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞

        self.stdout.write(self.style.SUCCESS(f"üé¨ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {tv_shows_loaded_count} —Å–µ—Ä–∏–∞–ª–æ–≤!"))