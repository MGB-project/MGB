# Generated by Django 5.1.6 on 2025-03-23 19:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('summary', models.TextField(blank=True, null=True)),
                ('first_release_date', models.IntegerField(blank=True, null=True)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('total_rating', models.FloatField(blank=True, null=True)),
                ('total_rating_count', models.IntegerField(blank=True, null=True)),
                ('platforms', models.JSONField(blank=True, null=True)),
                ('cover_url', models.URLField(blank=True, null=True)),
                ('videos', models.JSONField(blank=True, null=True)),
                ('genres', models.JSONField(blank=True, null=True)),
                ('game_modes', models.JSONField(blank=True, null=True)),
                ('screenshots', models.JSONField(blank=True, null=True)),
                ('similar_games', models.JSONField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('websites', models.JSONField(blank=True, null=True)),
                ('multiplayer_modes', models.JSONField(blank=True, default=list, null=True)),
                ('video_custom', models.FileField(blank=True, null=True, upload_to='videos_uploaded', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])])),
                ('custom_photo', models.URLField(blank=True, null=True)),
                ('custom_header_photo', models.URLField(blank=True, null=True)),
                ('youtube_trailer', models.CharField(blank=True, max_length=50, null=True)),
                ('is_main_game', models.BooleanField(default=False)),
                ('is_recently_trending_small', models.BooleanField(default=False)),
                ('is_recently_trending_big', models.BooleanField(default=False)),
                ('is_new_game', models.BooleanField(default=False)),
                ('is_age_limit', models.BooleanField(default=False)),
                ('rating_color', models.CharField(default='white', max_length=7)),
                ('btn_color', models.CharField(default='FF003C', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default='default_profile_icon.svg', upload_to='avatars/')),
                ('header', models.ImageField(default='header/default.jpg', upload_to='headers/')),
                ('bio', models.TextField(blank=True, default='Your bio here...')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Users',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='users.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='users.game')),
            ],
        ),
        migrations.CreateModel(
            name='GameRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField()),
                ('rating', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_games', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='users.game')),
            ],
            options={
                'unique_together': {('user', 'game')},
            },
        ),
        migrations.CreateModel(
            name='DroppedGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dropped_games', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dropped_by', to='users.game')),
            ],
            options={
                'unique_together': {('user', 'game')},
            },
        ),
        migrations.CreateModel(
            name='PlayedGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='played_by', to='users.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='played_games', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'game')},
            },
        ),
        migrations.CreateModel(
            name='PlayingGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='playing_by', to='users.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playing_games', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'game')},
            },
        ),
    ]
